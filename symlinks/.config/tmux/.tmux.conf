# =============================================================================
# environment
# =============================================================================
set -g default-terminal "alacritty"
set-option -sa terminal-overrides ",alacritty:Tc"

# =============================================================================
# copy and paste
# =============================================================================
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# =============================================================================
# misc
# =============================================================================
bind r source-file ~/.config/tmux/.tmux.conf \; display "Reloaded tmux config"
#set-option -g default-command "/usr/local/bin/reattach-to-user-namespace -l zsh"
bind \; command-prompt
bind l send-keys 'C-l'
bind-key b send-keys -R \; clear-history
set-option -g history-limit 50000
set-option -g mouse on
set-option -sg escape-time 10 # neovim told me to do this
set-option -g focus-events on # neovim told me to do this

# =============================================================================
# appearance
# =============================================================================
set-window-option -g window-status-current-format '│#I #W│'
set-window-option -g window-status-format '#I #W'
set-option -g pane-active-border-style fg=yellow
set-option -g pane-border-style fg=color0
set -g status-justify left
set -g status-left-length 32
set -g status-bg default
set -g status-fg white
set -g status-style default
set -g status-right-style bright
setw -g window-status-current-style fg=yellow,bold
set -g status-left "#[fg=white]#S: "
set -g status-right "#{?pane_synchronized, #[fg=red]SYNC#[default],}"
setw -g monitor-activity on
set -g visual-activity on
set -g message-style fg=black
set -g message-style bg=yellow
set -g message-style bright
set-option -g status-interval 5
set-option -g allow-rename off
set -g pane-border-status top
set -g pane-border-format ""

# =============================================================================
# prefix
# =============================================================================
# unbind C-b
# set -g prefix C-a
# bind C-a send-prefix

# =============================================================================
# windows
# =============================================================================
# -----------------------------------------------------------------------------
# navigation
# -----------------------------------------------------------------------------

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1
set -g base-index 1
setw -g pane-base-index 0
bind c new-window -c '#{pane_current_path}'
bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -v -c "#{pane_current_path}"
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
bind -r C-j switch-client -n
bind -r C-k switch-client -p
setw -g mode-keys vi
# -----------------------------------------------------------------------------
# resizing
# -----------------------------------------------------------------------------
bind -r H resize-pane -L 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 1
# -----------------------------------------------------------------------------
# moving
# -----------------------------------------------------------------------------
bind-key t swap-window -t 1 -d
# -----------------------------------------------------------------------------
# sync
# -----------------------------------------------------------------------------
bind = setw synchronize-panes
